use runtime::{Direction, Kind};
use bootstrap::{Binding, Value, KindedBinding, Word};

#[pub]
input_tsv -> Option<(String, Vec<usize>)>
  = "=" !. { None }
  / "= " f:file_name " " cs:columns { Some((f, cs))}

columns -> Vec<usize>
  = number_usize ++ " "

#[pub]
input_row -> Vec<Value>
  = value ++ " "

#[pub]
clause -> (Vec<Word>, Vec<(Binding, Direction)>)
  = sc:simple_clause oc:over_clause { (sc, oc) }

over_clause -> Vec<(Binding, Direction)>
  = " over " ob:over_bindings { ob }
  / { vec![] }

over_bindings -> Vec<(Binding, Direction)>
  = sort ++ (" "+)

sort -> (Binding, Direction)
  = d:sort_direction v:named_variable { (v, d) }

sort_direction -> Direction
  = descending:"-"? {
    match descending {
      Some(_) => Direction::Descending,
      None    => Direction::Ascending
    }
  }

simple_clause -> Vec<Word>
  = word+

word -> Word
  = kb:kinded_binding { Word::KindedBinding(kb) }
  / vt:view_term { Word::View(vt) }

view_term -> String
  = (!" over " [^?:_"#0-9])+ { match_str.to_owned() }

kinded_binding -> KindedBinding
  = kinded_variable / b:binding { (b, None) }

binding -> Binding
  = unbound_variable / named_variable / constant

unbound_variable -> Binding
  = "_" { Binding::Unbound }

kinded_variable -> KindedBinding
  = n:name k:kind? { (Binding::Variable(n), k) }

named_variable -> Binding
  = n:name kind? { Binding::Variable(n) }

constant -> Binding
  = v:value { Binding::Constant(v) }

value -> Value
  = value_id / value_text / value_number

value_id -> Value
  = "#" id:number_u64 { Value::Id(id) }

value_text -> Value
  = s:string_literal { Value::Text(s) }

value_number -> Value
  = n:number_f64 { Value::Number(n) }

// No escaping for now.
string_literal -> String
  = "\"" s:string_literal_contents "\"" { s }

string_literal_contents -> String
  = [^"]* { match_str.to_owned() }

kind -> Kind
  = ":id"     { Kind::Id }
  / ":text"   { Kind::Text }
  / ":number" { Kind::Number }
  / ":" identifier { panic!("Unknown kind: {:?}", match_str) }

name -> String
  = "?" identifier { match_str.to_owned() }

identifier = [A-Za-z0-9]+

file_name -> String
  = [^ ]* { match_str.to_owned() }

/** Numbers **/

number_usize -> usize
  = integer_digits { match_str.parse::<usize>().unwrap() }

number_u64 -> u64
  = integer_digits { match_str.parse::<u64>().unwrap() }

number_f64 -> f64
  = "-"? decimal_digits { match_str.parse::<f64>().unwrap() }

decimal_digits = [0-9]+ ("." [0-9]+)? { () }
integer_digits = [0-9]+