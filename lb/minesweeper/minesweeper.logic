block(`minesweeper) {
  alias_all(`ui:dom),
  
  clauses(`{
  
  // set externally 
  
  num_x[] = c ->
    int(c).
    
  num_y[] = c ->
    int(c).
    
  num_mines[] = c ->
    int(c).
    
  seed[] = s ->
    int(s).
    
  // internal state
  
  cleared(x,y) ->
    int(x), int(y).
    
  // game logic
  
  cell(id; x,y) ->
    string(id), int(x), int(y).
  
  mine(x,y) ->
    int(x), int(y).
  
  mine_count[x,y] = c ->
    int(x), int(y), int(c).
    
  num_cleared[] = c ->
    int(c).
    
  mine_x(i; x) -> 
    int(i), int(x).
    
  mine_x(i; x) <- 
    series<< x = rnd_uniform_int<1, 1000000000, s>[i] >>
    seed[] = s,
    int:range(1, num_mines[], 1, i).
    
  mine_y(i; y) -> 
    int(i), int(y).
      
  mine_y(i; y) <- 
    series<< y = rnd_uniform_int<1, 1000000000, 123>[i] >>
    int:range(1, num_mines[], 1, i).
    
  mine(x,y) <-
    int:range(1, num_mines[], 1, i),
    mine_x(i;xx),
    mine_y(i;yy),
    x = 1 + int:mod[xx, num_x[]],
    y = 1 + int:mod[yy, num_y[]].
  
  cell(id;x,y) <-
    int:range(1,num_x[],1,x),
    int:range(1,num_y[],1,y),
    id = "cell-" + int:string:convert[x] + "-" + int:string:convert[y].
    
  neighbouring_mine(x,y,nx,ny) <-
    cell(_;x,y),
    int:range(x-1,x+1,1,nx),
    int:range(y-1,y+1,1,ny),
    boolean:or(int:ne_3[nx,x],int:ne_3[ny,y], true),
    mine(nx,ny).
  
  mine_count[x, y] = c <-
    agg<< c=count() >>
    cell(_;x,y),
    neighbouring_mine(x,y,_,_).
    
  mine_count[x, y] = 0 <-
    cell(_;x,y),
    !neighbouring_mine(x,y,_,_).
    
  +cleared(x, y) <-
    +click(id),
    cell(id; x, y),
    game_in_progress@prev().
    
  +cleared(nx,ny) <-
    +cleared(x,y),
    mine_count(x,y;0),
    int:range(x-1,x+1,1,nx),
    int:range(y-1,y+1,1,ny),
    boolean:or(int:ne_3[nx,x],int:ne_3[ny,y], true),
    cell(_;nx,ny).
    
  -cleared(x, y) <-
    +click(id),
    cell(id; _, _),
    !game_in_progress@prev(),
    cleared@prev(x, y).
    
  ^seed[] = s2 <-
    series<< s2 = rnd_uniform_int<1, 1000000, s>[1] >>
    +click(id),
    cell(id; _, _),
    !game_in_progress@prev(),
    seed@prev[] = s.
    
  num_cleared[] = c <-
    agg<< c=count() >>
    cleared(_,_).
    
  game_lost() <-
    cleared(x, y),
    mine(x, y).
    
  game_won() <-
    !game_lost(),
    num_cleared[] + num_mines[] = num_x[] * num_y[].
    
  game_in_progress() <-
    !game_lost(),
    !game_won().
    
  // ui
    
  node("grid"; "root", 1, "div"),
  style("grid", "display"; "inline-block"),
  style("grid", "flex-direction"; "column"),
  inset("grid") <- .
  
  node(id; "grid", x, "div"),
  style(id, "display"; "flex"),
  style(id, "flex-direction"; "row") <-
    cell(_;x,_),
    id = "row-" + int:string:convert[x].
    
  node(id; parent, y, "button"),
  style(id, "width"; "1.5em"),
  style(id, "height"; "1.5em"),
  on_click(id) <-
    cell(id;x,y),
    parent = "row-" +  int:string:convert[x].
    
  visible(x, y) ->
    int(x), int(y).
    
  visible(x, y) <- 
    cleared(x, y).
    
  visible(x, y) <-
    mine(x, y),
    !game_in_progress().
    
  outset(id),
  text[id] = "" <-
    cell(id; x, y),
    !visible(x, y).
    
  flat(id) <-
    cell(id; x, y),
    visible(x, y).
    
  text[id] = "X" <-
    cell(id; x, y),
    visible(x, y),
    mine(x, y).
    
  text[id] = int:string:convert[c] <-
    cell(id; x, y),
    visible(x, y),
    !mine(x,y),
    mine_count[x,y] = c,
    c != 0.
    
  style(id, "color", "red") <-
    cell(id; x, y),
    cleared(x, y),
    mine(x, y).
    
  outset(id) ->
    string(id).
    
  style(id, "border"; "2px solid"),
  style(id, "border-color"; "white gray gray white"),
  style(id, "background-color"; "silver") <-
    outset(id).
    
  inset(id) ->
    string(id).
      
  style(id, "border"; "2px solid"),
  style(id, "border-color"; "gray white white gray"),
  style(id, "background-color"; "silver") <-
    inset(id).
    
  flat(id) ->
    string(id).
        
  style(id, "border"; "1px solid gray"),
  style(id, "border-width"; "1px 0 0 1px"),
  style(id, "background-color"; "silver") <-
    flat(id).
  })
} <-- .
