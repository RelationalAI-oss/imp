block(`dom) {
  export(`{ 
    node(node), node_id(node:id) -> int(id).
       
    root[] = root ->
      node(root).
      
    parent[child] = parent ->
      node(child), node(parent).
      
    position[child] = ix ->
      node(child), int(ix).
       
    fixed_child[parent, position] = child ->
      node(parent), int(position), node(child).
     
    tag[node] = tag -> // defaults to "div"
      node(node), string(tag).
     
    attribute[node, key] = val ->
      node(node), string(key), string(val).
 
    style[node, key] = val ->
      node(node), string(key), string(val).
 
    text[node] = text ->
      node(node), string(text).
     
    event(event) -> 
      string(event).
 
    listen_to(node, event) ->
      string(event), node(node), event(event).
     
    clear(node) ->
      node(node).
     
    focus[] = node ->
      node(node).
 
    click(node) ->
      node(node). 
 
    key_down[node] = key ->
      node(node), int(key).
     
    change[node] = text ->
      node(node), string(text).
     
    double_click(node) ->
      node(node).
      
    blur(node) ->
      node(node).
      
    frame() ->. // dummy event for animations, physics etc
  }),
  clauses(`{
    lang:derivationType[`node]="DerivedAndStored".
    
    lang:autoNumbered(`node_id).
    lang:constructor(`root).
    lang:constructor(`fixed_child).
  
    root[] = _ <-.
    
    parent[child] = parent <-
      fixed_child[parent, _] = child.
      
    position[child] = position <-
      fixed_child[_, position] = child.
    
    lang:defaultValue[`tag] = "div".
    
    lang:pulse(`clear).
  
    lang:pulse(`click).
    lang:pulse(`key_down).
    lang:pulse(`change).
    lang:pulse(`double_click).
    lang:pulse(`blur).
    lang:pulse(`frame).
    
    event("click").
    event("key_down").
    event("change").
    event("double_click").
    event("blur").
    
    // every node except the root must have a parent
    node(node) -> 
      node = root[]; parent[node] = _.
      
    // no two nodes at same position
    parent[child1] = parent[child2], child1 != child2 ->
      position[child1] != position[child2].
    
    // no gaps in positions
    // TODO does not compile
    // parent[child1] = parent, position[child1] > 0, position2 = position[child1] - 1 ->
    //  parent[child2] = parent, position[child2] = position2.
      
    // can EITHER set text OR have children (because setting node.textContent deletes any existing children)
    text[node] = _ ->
      !(parent[_] = node). 
  })
} <-- .
