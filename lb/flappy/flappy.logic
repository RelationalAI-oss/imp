block(`flappy) {
  alias(`ui:dom, `dom),
  
  clauses(`{
  
    // state
  
    game_running() ->.
    game_over() ->.
    game_not_started() <-
      !game_running(),
      !game_over().
    
    player_x[] = x ->
      float(x).

    player_y[] = y -> 
      float(y).
      
    player_dy[] = dy ->
      float(dy).
      
    seed[] = seed ->
      int(seed).
      
    seed[] = 3.
    
    best_score[] = best_score ->
      int(best_score).
      
    // event handlers
    
    +game_running(),
    -game_over(),
    ^player_x[] = 0f,
    ^player_y[] = 45f,
    ^player_dy[] = 0f <-
      !game_running@prev(),
      +dom:click(_).
    
    -game_running(),
    +game_over() <-
      +dom:frame(),
      game_running@prev(),
      collision().
      
    // TODO cant correct for frame length because datetime resolution is 1s
      
    ^player_x[] = player_x@prev[] + 3f,
    ^player_y[] = player_y@prev[] + player_dy@prev[] <-
      +dom:frame(),
      game_running@prev().
    
    ^player_dy[] = player_dy@prev[] + 0.3f <-
      +dom:frame(),
      game_running@prev(),
      !+dom:click(_).
     
    ^player_dy[] = player_dy@prev[] - 2f <-
      +dom:frame(),
      game_running@prev(),
      +dom:click(_).
      
    +best_score[] = 0 <-
      +game_running(), // TODO make an init event?
      !(best_score@prev[] = _).
  
    ^best_score[] = int:max[best_score@prev[], score@prev[]] <-
      +game_running(). 
      
    // computed
    
    viewport_width[] = 100f.
    viewport_height[] = 100f.
    floor_height[] = 90f.
    
    player_fixed_x[] = 20f.
    player_width[] = 10f.
    player_height[] = 10f * (41f / 57f).
    
    obstacle_width[] = 10f.
    obstacle_spacing[] = 50f.
    gap_size[] = 35f.
      
    obstacle_visible(i) <-
      left_x = player_x[] - obstacle_width[],
      right_x = player_x[] + viewport_width[] + obstacle_width[],
      left_i = float:int:convert[float:ceil[left_x / obstacle_spacing[]]],
      right_i = float:int:convert[float:floor[right_x / obstacle_spacing[]]],
      int:range(left_i, right_i, 1, i).
      
    obstacle_x[i] = x ->
      int(i), float(x).
      
    obstacle_x[i] = x <-
      obstacle_visible(i),
      world_x = int:float:convert[i] * obstacle_spacing[],
      x = world_x - player_x[].
      
    obstacle_y[i] = y ->
      int(i), float(y).
      
    obstacle_y[ii] = y <-
      series<< y = rnd_uniform_real<5f, 35f, seed>[ii] >>
      seed[] = seed,
      obstacle_visible(i),
      int:range(1, i, 1, ii). // hack to get deterministic random gen (i -> y)
      
    collision() <-
      !(0f <= player_y[] <= floor_height[] - player_height[]) .
      
    collision() <- 
      obstacle_x[i] - player_width[] <= player_fixed_x[] <= obstacle_x[i] + obstacle_width[],
      !(obstacle_y[i] <= player_y[] <= obstacle_y[i] + gap_size[] - player_height[]).
      
    score[] = score ->
      int(score).  
    
    score[] = float:int:convert[float:floor[player_x[] / obstacle_spacing[]]] <-.
      
    // ui
    
    viewport[] = node ->
      dom:node(node).
    lang:constructor(`viewport).
    
    viewport[] = viewport {
      dom:parent[] = dom:root[],
      dom:position[] = 0,
      dom:tag[] = "svg:svg",
      dom:attribute["width"] = "480",
      dom:attribute["viewBox"] = "10 0 80 100",
      dom:listen_to("click")
    }.
      
      
  })    

} <-- .
