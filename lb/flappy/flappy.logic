block(`flappy) {
  alias(`ui:dom, `dom),
  
  clauses(`{
  
    // state
  
    game_running() ->.
    game_over() ->.
    game_not_started() <-
      !game_running(),
      !game_over().
    
    player_x[] = x ->
      float(x).

    player_y[] = y -> 
      float(y).
      
    player_dy[] = dy ->
      float(dy).
      
    seed[] = seed ->
      int(seed).
      
    seed[] = 3.
    
    best_score[] = best_score ->
      int(best_score).
      
    // event handlers
    
    +game_running(),
    -game_over(),
    ^player_x[] = 0f,
    ^player_y[] = 45f,
    ^player_dy[] = 0f <-
      !game_running@prev(),
      +dom:click(_).
    
    -game_running(),
    +game_over() <-
      +dom:frame(),
      game_running@prev(),
      collision().
      
    // TODO cant correct for frame length because datetime resolution is 1s
      
    ^player_x[] = player_x@prev[] + 3f,
    ^player_y[] = player_y@prev[] + player_dy@prev[] <-
      +dom:frame(),
      game_running@prev().
    
    ^player_dy[] = player_dy@prev[] + 0.3f <-
      +dom:frame(),
      game_running@prev(),
      !+dom:click(_).
     
    ^player_dy[] = player_dy@prev[] - 2f <-
      +dom:frame(),
      game_running@prev(),
      +dom:click(_).
      
    +best_score[] = 0 <-
      +game_running(), // TODO make an init event?
      !(best_score@prev[] = _).
  
    ^best_score[] = int:max[best_score@prev[], score@prev[]] <-
      +game_running(). 
      
    // computed
    
    viewport_width[] = 100f.
    viewport_height[] = 100f.
    floor_height[] = 90f.
    
    player_fixed_x[] = 20f.
    player_width[] = 10f.
    player_height[] = 10f * (41f / 57f).
    
    obstacle_width[] = 10f.
    obstacle_spacing[] = 50f.
    gap_size[] = 35f.
      
    obstacle_visible(i) <-
      left_x = player_x[] - obstacle_width[],
      right_x = player_x[] + viewport_width[] + obstacle_width[],
      left_i = float:int:convert[float:ceil[left_x / obstacle_spacing[]]],
      right_i = float:int:convert[float:floor[right_x / obstacle_spacing[]]],
      int:range(left_i, right_i, 1, i).
      
    obstacle_x[i] = x ->
      int(i), float(x).
      
    obstacle_x[i] = x <-
      obstacle_visible(i),
      world_x = int:float:convert[i] * obstacle_spacing[],
      x = world_x - player_x[].
      
    obstacle_y[i] = y ->
      int(i), float(y).
      
    obstacle_y[ii] = y <-
      series<< y = rnd_uniform_real<5f, 35f, seed>[ii] >>
      seed[] = seed,
      obstacle_visible(i),
      int:range(1, i, 1, ii). // hack to get deterministic random gen (i -> y)
      
    collision() <-
      !(0f <= player_y[] <= floor_height[] - player_height[]) .
      
    collision() <- 
      obstacle_x[i] - player_width[] <= player_fixed_x[] <= obstacle_x[i] + obstacle_width[],
      !(obstacle_y[i] <= player_y[] <= obstacle_y[i] + gap_size[] - player_height[]).
      
    score[] = score ->
      int(score).  
    
    score[] = float:int:convert[float:floor[player_x[] / obstacle_spacing[]]] <-.
      
    // ui
    
    viewport[] = node ->
      dom:node(node).
    lang:constructor(`viewport).
    
    viewport[] = viewport {
      dom:parent[] = dom:root[],
      dom:position[] = 0,
      dom:tag[] = "svg:svg",
      dom:attribute["width"] = "480",
      dom:attribute["viewBox"] = "10 0 80 100",
      dom:listen_to("click")
    }.
    
    dom:fixed_child[viewport[], 0] = sky,
    dom:node(sky) {
      dom:tag[] = "svg:rect",
      dom:attribute["x"] = "0",
      dom:attribute["y"] = "0",
      dom:attribute["width"] = "100",
      dom:attribute["height"] = "53",
      dom:attribute["fill"] = "rgb(112, 197, 206)"
    }.
      
    dom:fixed_child[viewport[], 1] = background,
    dom:node(background) {
      dom:tag[] = "svg:image",
      dom:attribute["x"] = "0",
      dom:attribute["y"] = "52",
      dom:attribute["width"] = "100",
      dom:attribute["height"] = "43",
      dom:attribute["preserveAspectRatio"] = "xMinYMin slice",
      dom:attribute["xlink:href"] = "https://cdn.rawgit.com/bhauman/flappy-bird-demo/master/resources/public/imgs/background.png"
    }.
    
    dom:fixed_child[viewport[], 2] = ground,
    dom:node(ground) {
      dom:tag[] = "svg:rect",
      dom:attribute["x"] = "0",
      dom:attribute["y"] = "95",
      dom:attribute["width"] = "100",
      dom:attribute["height"] = "5",
      dom:attribute["fill"] = "rgb(222, 216, 149)"
    }.
    
    obstacles[] = node ->
      dom:node(node).
    lang:constructor(`obstacles).
    
    obstacles[] = obstacles {
      dom:parent[] = viewport[],
      dom:position[] = 3,
      dom:tag[] = "svg:svg",
      dom:attribute["x"] = "0",
      dom:attribute["y"] = "0",
      dom:attribute["width"] = "100",
      dom:attribute["height"] = "100"
    }.
    
    obstacle[i, part] = node ->
      int(i), string(part), dom:node(node).
    lang:constructor(`obstacle).
    
    obstacle[i, "top body"] = top_body,
    dom:node(top_body) {
      dom:parent[] = obstacles[],
      dom:position[] = (4*i) + 0, 
      dom:tag[] = "svg:image",
      dom:attribute["x"] = float:string:convert[x],
      dom:attribute["y"] = "0",
      dom:attribute["width"] = float:string:convert[obstacle_width[]],
      dom:attribute["height"] = float:string:convert[y],
      dom:attribute["preserveAspectRatio"] = "none",
      dom:attribute["xlink:href"] = "https://cdn.rawgit.com/bhauman/flappy-bird-demo/master/resources/public/imgs/pillar-bkg.png"
    },
    obstacle[i, "bottom body"] = bottom_body,
    dom:node(bottom_body) {
      dom:parent[] = obstacles[],
      dom:position[] = (4*i) + 1, 
      dom:tag[] = "svg:image",
      dom:attribute["x"] = float:string:convert[x],
      dom:attribute["y"] = float:string:convert[y+gap_size[]],
      dom:attribute["width"] = float:string:convert[obstacle_width[]],
      dom:attribute["height"] = float:string:convert[floor_height[]-y-gap_size[]],
      dom:attribute["preserveAspectRatio"] = "none",
      dom:attribute["xlink:href"] = "https://cdn.rawgit.com/bhauman/flappy-bird-demo/master/resources/public/imgs/pillar-bkg.png"
    },
    obstacle[i, "top head"] = top_head,
    dom:node(top_head) {
      dom:parent[] = obstacles[],
      dom:position[] = (4*i) + 2, 
      dom:tag[] = "svg:image",
      dom:attribute["x"] = float:string:convert[x-1f],
      dom:attribute["y"] = float:string:convert[y-5f],
      dom:attribute["width"] = float:string:convert[obstacle_width[]+2f],
      dom:attribute["height"] = "5",
      dom:attribute["xlink:href"] = "https://cdn.rawgit.com/bhauman/flappy-bird-demo/master/resources/public/imgs/lower-pillar-head.png"
    },
    obstacle[i, "bottom head"] = bottom_head,
    dom:node(bottom_head) {
      dom:parent[] = obstacles[],
      dom:position[] = (4*i) + 3, 
      dom:tag[] = "svg:image",
      dom:attribute["x"] = float:string:convert[x-1f],
      dom:attribute["y"] = float:string:convert[y+gap_size[]],
      dom:attribute["width"] = float:string:convert[obstacle_width[]+2f],
      dom:attribute["height"] = "5",
      dom:attribute["xlink:href"] = "https://cdn.rawgit.com/bhauman/flappy-bird-demo/master/resources/public/imgs/lower-pillar-head.png"
    } <-
      obstacle_x[i] = x,
      obstacle_y[i] = y.

    
          
        dom:node(id),
        dom:parent[id] = "viewport",
        dom:position[id] = 4,
        dom:tag[id] = "svg:text",
        dom:attribute[id, "x"] = "50",
        dom:attribute[id, "y"] = "45",
        dom:attribute[id, "text-anchor"] = "middle",
        dom:attribute[id, "font-size"] = "6",
        dom:text[id] = "Click the screen to begin!" <-
          id = "start",
          game_not_started().
          
        dom:node(id),
        dom:parent[id] = "viewport",
        dom:position[id] = 4,
        dom:tag[id] = "svg:svg",
        
        dom:node(id1),
        dom:parent[id1] = id,
        dom:position[id1] = 0,
        dom:tag[id1] = "svg:text",
        dom:attribute[id1, "x"] = "50",
        dom:attribute[id1, "y"] = "30",
        dom:attribute[id1, "text-anchor"] = "middle",
        dom:attribute[id1, "font-size"] = "6",
        dom:text[id1] = "Game Over :(",
        
        dom:node(id2),
        dom:parent[id2] = id,
        dom:position[id2] = 1,
        dom:tag[id2] = "svg:text",
        dom:attribute[id2, "x"] = "50",
        dom:attribute[id2, "y"] = "55",
        dom:attribute[id2, "text-anchor"] = "middle",
        dom:attribute[id2, "font-size"] = "6",
        dom:text[id2] = "Score " + int:string:convert[score[]],
        
        dom:node(id3),
        dom:parent[id3] = id,
        dom:position[id3] = 2,
        dom:tag[id3] = "svg:text",
        dom:attribute[id3, "x"] = "50",
        dom:attribute[id3, "y"] = "65",
        dom:attribute[id3, "text-anchor"] = "middle",
        dom:attribute[id3, "font-size"] = "6",
        dom:text[id3] = "Best " + int:string:convert[best_score[]],
        
        dom:node(id4),
        dom:parent[id4] = id,
        dom:position[id4] = 3,
        dom:tag[id4] = "svg:text",
        dom:attribute[id4, "x"] = "50",
        dom:attribute[id4, "y"] = "85",
        dom:attribute[id4, "text-anchor"] = "middle",
        dom:attribute[id4, "font-size"] = "4",
        dom:text[id4] = "Click to play again!" <-

          id = "game-over",
          id1 = "game-over-1",
          id2 = "game-over-2",
          id3 = "game-over-3",
          id4 = "game-over-4",
          game_over().
          
        dom:node(id) {
        dom:parent[] = "viewport",
        dom:position[] = 5,
        dom:tag[] = "svg:image"
        },
        dom:attribute[id, "x"] = float:string:convert[player_fixed_x[]],
        dom:attribute[id, "y"] = float:string:convert[player_y[]],
        dom:attribute[id, "width"] = float:string:convert[player_width[]],
        dom:attribute[id, "height"] = float:string:convert[player_height[]],
        dom:attribute[id, "xlink:href"] = "https://cdn.rawgit.com/bhauman/flappy-bird-demo/master/resources/public/imgs/flappy-base.png" <-
          id = "player".      
  })    
} <-- .
